# KinD-related variables
KIND_NAME        := minikube
KUBECTL_VERSION  ?= v1.29.14
KIND_VERSION     ?= v0.22.0
DAPR_VERSION     := 1.1.1
HELM_VERSION     := v3.17.1
DOCKER_IMAGE     := {{ if .Registry }}$(IMAGE_REGISTRY)/{{ end }}$(IMAGE_NAME):$(IMAGE_VERSION)
KUBECONFIG       ?= ${HOME}/.kube/config
KUBECTL          := $(shell which kubectl || echo bin/kubectl)
KIND             := $(shell which kind || echo bin/kind)
TARGET_NAMESPACE ?= `cat .id`
KERNEL_NAME      := `uname`
CONFIGJSONFILE   := ~/.docker/config.json
DOCKERCONFIGJSON := `cat $(CONFIGJSONFILE) | base64 --wrap=0`
DOCKERCREDS      := if [ -f $(CONFIGJSONFILE) ]; then echo ",docker.b64encodedDockerConfig=$(DOCKERCONFIGJSON)"; fi

.id:
	@if [ -f ".id" ]; then echo "Use defined namespace $(TARGET_NAMESPACE)"; else \
	git config user.email | awk -F@ '{print $$1}' > .id; \
	echo "Define user namespace $(TARGET_NAMESPACE)"; \
	fi

kind-download: $(KUBECTL)
	@if [ -f $(KIND) ]; then echo "$(KIND) is already downloaded, `$(KIND) --version`"; else \
	mkdir -p bin; \
	curl -Lo $(KIND) https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(KERNEL_NAME)-amd64; \
	chmod +x $(KIND); \
	fi

create-namespace: $(KUBECTL) .id
	@$(KUBECTL) create namespace "$(TARGET_NAMESPACE)" || true

kind-dapr: helm-install kind-cluster helm-download
	@if [ "$(shell $(KUBECTL) get service -n dapr | grep -c dapr)" = "0" ]; then \
	$(HELM) repo add dapr https://dapr.github.io/helm-charts/; \
	$(HELM) repo update; \
	$(HELM) upgrade --install dapr dapr/dapr \
	--version=$(DAPR_VERSION) \
	--namespace dapr \
	--create-namespace \
	--wait; else \
	echo "dapr is already installed"; fi

kind-redis: helm-install kind-dapr create-namespace
	@if [ "$(shell $(KUBECTL) get service -n redis | grep -c redis)" = "0" ]; then \
	$(HELM) repo add bitnami https://charts.bitnami.com/bitnami; \
	$(HELM) upgrade --install --namespace redis --set architecture=standalone --set auth.enabled=false --create-namespace --wait redis bitnami/redis; else \
	echo "redis is already installed"; fi
	@if [ "$(shell $(KUBECTL) get component -n $(TARGET_NAMESPACE) | grep -c dapr-component)" = "0" ]; then \
	sed -e "s/{TARGET_NAMESPACE}/$(TARGET_NAMESPACE)/g" kind/redis-no-password.yaml.template > kind/redis.yaml; \
	$(KUBECTL) apply -f kind/redis.yaml; \
	rm kind/redis.yaml; else \
	echo "dapr-component is already installed"; fi

kind-deploy: kind-deploy-{{ .Helm.GetName }}

create-deployment: helm-install .id
	@$(HELM) template {{ .Helm.GetName }} helm/{{ .Helm.GetName }} \
		--wait --namespace $(TARGET_NAMESPACE) \
		--set image.tag=$(IMAGE_VERSION)$(shell $(DOCKERCREDS)) \
		-f helm/{{ .Helm.GetName }}/minikube-values.yaml > deploy-$(IMAGE_NAME).yaml

deploy-{{ .Helm.GetName }}: create-namespace create-deployment
	@$(KUBECTL) delete --ignore-not-found=true -f deploy-$(IMAGE_NAME).yaml
	@$(KUBECTL) apply -f deploy-$(IMAGE_NAME).yaml
	@rm -f deploy-$(IMAGE_NAME).yaml

image: .image-$(IMAGE_VERSION)

kind-deploy-%: target=$(@:kind-%=%)
kind-deploy-%: kind image package
	@if [ "$(shell $(KUBECTL) config current-context | grep kind-)" = "" ]; then\
		>&2 echo minikube install is not recommended on non-kind clusters; exit 2; \
	fi;
	@$(KIND) load --name ${KIND_NAME} docker-image ${DOCKER_IMAGE}
	@$(MAKE) ${target} HELM_SETFLAGS='-f helm/minikube-values.yaml ${HELM_SETFLAGS}'

push: .push-$(IMAGE_VERSION)

.push-$(IMAGE_VERSION): .image-$(IMAGE_VERSION)
	@docker push $(DOCKER_IMAGE)
	@touch $@

.image-$(IMAGE_VERSION):
	@docker build \
		--build-arg GO111MODULE=off \
		--build-arg GOPRIVATE="${GOPRIVATE}" \
		--build-arg BUILD_MANIFEST="$(BUILD_MANIFEST_JSON)" \
		-t $(DOCKER_IMAGE) -f $(SERVER_DOCKERFILE) .
	@touch $@

kind-cluster: helm-install kind-download
	@if [ "$(shell ${KIND} get clusters | grep ${KIND_NAME})" = "" ] ; then \
		$(KIND) create cluster -v 1 --name ${KIND_NAME}; \
	fi
	@$(KUBECTL) config use-context kind-${KIND_NAME}
	@if [ "${HELM3_VER}" = "" ]; then\
		$(HELM) init --service-account tiller; \
	fi

kind: kind-cluster kind-dapr kind-redis

kind-destroy: kind-download
	@$(KIND) delete cluster --name ${KIND_NAME}

kind-clean:
	@rm -f .image-* {{ .Helm.GetName }}-*

bin/kubectl:
	@mkdir -p bin
	@curl -Ls -o bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/$(shell echo $(KERNEL_NAME) | tr A-Z a-z)/amd64/kubectl
	@chmod +x bin/kubectl

