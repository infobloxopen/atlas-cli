package main

import (
	"github.com/grpc-ecosystem/go-grpc-middleware"
	"github.com/grpc-ecosystem/go-grpc-middleware/validator"
	{{- if .WithMetrics }}
	grpc_prometheus "github.com/grpc-ecosystem/go-grpc-prometheus"
	{{- end }}
	"github.com/infobloxopen/atlas-app-toolkit/gateway"
	"github.com/grpc-ecosystem/go-grpc-middleware/logging/logrus"
	"github.com/sirupsen/logrus"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
	"github.com/infobloxopen/atlas-app-toolkit/requestid"
	{{ if .WithDatabase }}"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"{{ end }}
)

func NewGRPCServer(logger *logrus.Logger{{ if or .WithPublishTopic .WithSubscribeTopic }}, pubsub *dapr.PubSub{{ end }}{{ if .WithDatabase }}, dbConnectionString string{{ end }}) (*grpc.Server, error){
	grpcServer := grpc.NewServer(
	grpc.KeepaliveParams(
		keepalive.ServerParameters{
			Time:    time.Duration(viper.GetInt("config.keepalive.time")) * time.Second,
			Timeout: time.Duration(viper.GetInt("config.keepalive.timeout")) * time.Second,
		},
	),
	grpc.UnaryInterceptor(
		grpc_middleware.ChainUnaryServer(
			// logging middleware
			grpc_logrus.UnaryServerInterceptor(logrus.NewEntry(logger)),

			// Request-Id interceptor
			requestid.UnaryServerInterceptor(),

			{{ if .WithMetrics }}
			// Metrics middleware
			grpc_prometheus.UnaryServerInterceptor,
			{{- end }}

			// validation middleware
			grpc_validator.UnaryServerInterceptor(),

			// collection operators middleware
			gateway.UnaryServerInterceptor(),
			),
		),
	)
	{{ if .WithDatabase }}
	// create new postgres database
	db, err := gorm.Open("postgres", dbConnectionString)
	if err != nil {
		return nil, err
	}
	configureDBConns(db)
	{{ end }}
	// register service implementation with the grpcServer
	s, err := svc.NewBasicServer({{ if or .WithPublishTopic .WithSubscribeTopic }}pubsub{{ if .WithDatabase }}, {{ end }}{{ end }}{{ if .WithDatabase }}db{{ end }})
	if err != nil {
		return nil, err
	}
	pb.Register{{ .Name | Service }}Server(grpcServer, s)
	// Register reflection service on gRPC server.
	reflection.Register(grpcServer)

	return grpcServer, nil
}

{{ if .WithDatabase }}
// configureDBConns sets the db connection string
func configureDBConns(db *gorm.DB) {
	db.LogMode(viper.GetBool("database.log.mode"))
	db.DB().SetMaxOpenConns(viper.GetInt("database.max.open.conns"))
	db.DB().SetMaxIdleConns(viper.GetInt("database.max.idle.conns"))
	db.DB().SetConnMaxLifetime(viper.GetDuration("database.max.conn.lifetime"))
	db.DB().SetConnMaxIdleTime(viper.GetDuration("database.max.conn.idle.time"))
}{{ end }}
