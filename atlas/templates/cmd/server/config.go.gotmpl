package main

import "github.com/spf13/pflag"

const (
	// configuration defaults support local development (i.e. "go run ...")

	// Server
	defaultServerAddress = "0.0.0.0"
	defaultServerPort    = "9090"

	// Gateway 
	defaultGatewayEnable      = {{ if .WithGateway }}true{{ else }}false{{ end }}
	defaultGatewayAddress     = "0.0.0.0"
	defaultGatewayPort        = "8080"
	defaultGatewayURL         = "/{{ .Name | URL }}/v1/"
	defaultGatewaySwaggerFile = "pkg/pb/service.swagger.json"

	// Database 
	defaultDatabaseEnable   = {{ if .WithDatabase }}true{{ else }}false{{ end }}
	// DSN example: "postgres://postgres:postgres@postgres:5432/atlas_db?sslmode=disable"
	defaultDatabaseDSN      = ""
	defaultDatabaseType     = "postgres"
	defaultDatabaseAddress  = "0.0.0.0"
	defaultDatabasePort     = "5432"
	defaultDatabaseName     = "{{ .Name | Database }}"
	defaultDatabaseUser     = "postgres"
	defaultDatabasePassword = "postgres"
	defaultDatabaseSSL      = "disable"
	defaultDatabaseOption   = ""

	// PubSub
	defaultPubsubEnable    =  {{ if .WithPubsub }}true{{ else }}false{{ end }}
	defaultPubsubAddress   = "pubsub.atlas"
	defaultPubsubPort      = "5555"
	defaultPubsubPublish   = "example_hello"
	defaultPubsubSubscribe = "example_hello"
	defaultPubsubSubscriberID = "example_hello_subscriberid"

	// Authz 
	defaultAuthzEnable  = false
	defaultAuthzAddress = "authz.atlas"
	defaultAuthzPort    = "5555"

	// Audit Logging
	defaultAuditEnable  = false
	defaultAuditAddress = "audit.atlas"
	defaultAuditPort    = "5555"

	// Tagging
	defaultTaggingEnable  = false
	defaultTaggingAddress = "tagging.atlas"
	defaultTaggingPort    = "5555"

	// Health
	defaultInternalEnable    = {{ if or .WithHealth .WithMetrics }}true{{ else }}false{{ end }}
	defaultInternalAddress   = "0.0.0.0"
	defaultInternalPort      = "8081"
	defaultInternalHealth    = "/healthz"
	defaultInternalReadiness = "/ready"

	defaultConfigDirectory = "deploy/"
	defaultConfigFile      = ""
	defaultSecretFile      = ""
	defaultApplicationID   = "{{ .Name }}"

	// Heartbeat
	defaultKeepaliveTime    = 10
	defaultKeepaliveTimeout = 20

	// Logging
	defaultLoggingLevel = "debug"

	{{ if .WithProfiler }}
	//Profiler
	defaultProfilerEnabled = false
	defaultProfilerAddress = "0.0.0.0"
	defaultProfilerPort    = "9999"
	{{ end }}
)

var (
	// define flag overrides
	_ = pflag.String("server.address", defaultServerAddress, "adress of gRPC server")
	_ = pflag.String("server.port", defaultServerPort, "port of gRPC server")

	_ = pflag.Bool("gateway.enable", defaultGatewayEnable, "enable gatway")
	_ = pflag.String("gateway.address", defaultGatewayAddress, "address of gateway server")
	_ = pflag.String("gateway.port", defaultGatewayPort, "port of gateway server")
	_ = pflag.String("gateway.endpoint", defaultGatewayURL, "endpoint of gateway server")
	_ = pflag.String("gateway.swaggerFile", defaultGatewaySwaggerFile, "directory of swagger.json file")

	_ = pflag.Bool("database.enable", defaultDatabaseEnable, "enable database")
	_ = pflag.String("database.dsn", defaultDatabaseDSN, "DSN of the database")
	_ = pflag.String("database.type", defaultDatabaseType, "type of the database")
	_ = pflag.String("database.address", defaultDatabaseAddress, "address of the database")
	_ = pflag.String("database.port", defaultDatabasePort, "port of the database")
	_ = pflag.String("database.name", defaultDatabaseName, "name of the database")
	_ = pflag.String("database.user", defaultDatabaseUser, "database username")
	_ = pflag.String("database.password", defaultDatabasePassword, "database password")
	_ = pflag.String("database.ssl", defaultDatabaseSSL, "database ssl mode")
	_ = pflag.String("database.option", defaultDatabaseOption, "define custom option to db driver")

	_ = pflag.Bool("atlas.pubsub.enable", defaultPubsubEnable, "enable application with pubsub")
	_ = pflag.String("atlas.pubsub.address", defaultPubsubAddress, "address or FQDN of the pubsub service")
	_ = pflag.String("atlas.pubsub.port", defaultPubsubPort, "port of the pubsub service")
	_ = pflag.String("atlas.pubsub.publish", defaultPubsubPublish, "publisher topic")
	_ = pflag.String("atlas.pubsub.subscribe", defaultPubsubSubscribe, "subscriber topic")
	_ = pflag.String("atlas.pubsub.subscriber.id", defaultPubsubSubscriberID, "subscriber id")


	_ = pflag.Bool("atlas.authz.enable", defaultAuthzEnable, "enable application with authorization")
	_ = pflag.String("atlas.authz.address", defaultAuthzAddress, "address or FQDN of the authorization service")
	_ = pflag.String("atlas.authz.port", defaultAuthzPort, "port of the authorization service")

	_ = pflag.Bool("atlas.audit.enable", defaultAuditEnable, "enable logging of gRPC requests on Atlas audit service")
	_ = pflag.String("atlas.audit.address", defaultAuditAddress, "address or FQDN of Atlas audit log service")
	_ = pflag.String("atlas.audit.port", defaultAuditPort, "port of Atlas audit log service")

	_ = pflag.Bool("atlas.tagging.enable", defaultTaggingEnable, "enable tagging")
	_ = pflag.String("atlas.tagging.address", defaultTaggingAddress, "address or FQDN of Atlas tagging service")
	_ = pflag.String("atlas.tagging.port", defaultTaggingPort, "port of Atlas tagging service")

	_ = pflag.Bool("internal.enable", defaultInternalEnable, "enable internal http server")
	_ = pflag.String("internal.address", defaultInternalAddress, "address of internal http server")
	_ = pflag.String("internal.port", defaultInternalPort, "port of internal http server")
	_ = pflag.String("internal.health", defaultInternalHealth, "endpoint for health checks")
	_ = pflag.String("internal.readiness", defaultInternalReadiness, "endpoint for readiness checks")

	_ = pflag.String("config.source", defaultConfigDirectory, "directory of the configuration file")
	_ = pflag.String("config.file", defaultConfigFile, "directory of the configuration file")
	_ = pflag.String("config.secret.file", defaultSecretFile, "directory of the secrets configuration file")
	_ = pflag.String("app.id", defaultApplicationID, "identifier for the application")

	_ = pflag.Int("config.keepalive.time", defaultKeepaliveTime, "default value, in seconds, of the keepalive time")
	_ = pflag.Int("config.keepalive.timeout", defaultKeepaliveTimeout, "default value, in seconds, of the keepalive timeout")

	_ = pflag.String("logging.level", defaultLoggingLevel, "log level of application")

	{{ if .WithProfiler }}
	_ = pflag.Bool("profiler.enable", defaultProfilerEnabled, "enable profiler by default false")
	_ = pflag.String("profiler.address", defaultProfilerAddress, "address of profiler server")
	_ = pflag.String("profiler.port", defaultProfilerPort, "port of profiler server")
	{{ end }}
)
